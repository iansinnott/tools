#!/bin/bash

if [[ $# = 0 ]] ; then
  ls | shuf | xargs -n 1 -P 8 ${BASH_SOURCE[0]} 
fi

while [[ $# -gt 0 ]]; do
  if [[ $1 =~ \. ]]; then
    if [[ -n "$2" ]]; then 
      base="$2" 
      domain=$1
      base_url=$1
      shift
    else 
      base=$( echo $1 | sed -n 's/\..*$//p' )
      base_url=$1
    fi
    extra=
  else
    base=$1
    base_url=$base.bandcamp.com
    extra=music
  fi
  shift

  echo "♫ $base ♫"
  [[ -e $base ]] || mkdir $base

  if [[ -e $base/domain ]]; then
    base_url=$(< $base/domain )
    echo " ! using $base_url" 
  elif [[ -n "$domain" ]]; then
    echo 'hi';
    echo $base_url > $base/domain
  fi

  cd $base
  starting_point=$PWD

  for full in $(curl -s https://$base_url/$extra |  grep -Po '(?<=")[\w:\/\.]+(?<=album\/)[^?'"'"'"]*' | sort | uniq ); do
    # sometimes we get x-dom references, sometimes it's relevant. We resolve that below.
    i=$(basename $full)
    place=$starting_point/$i
    isnew=

    if [[ ! -e $place ]]; then
      isnew=true
      mkdir $place
    fi

    # if we haven't any files then we just try to download from it again... 
    count=$( ls $place/*.mp3 $place/no-files | wc -l )
    if [[ "$count" = "0" ]]; then
      cd $place
      echo "--- $place"

      # here's where we look for the full url
      if [[ $full =~ : ]]; then
        url=$full
        echo $full > $place/domain
      else
        url=https://$base_url/album/$i
      fi
      echo "  ⇩ $url"

      # this means we've been here before. We can use the -g 
      # option to see if nothing ought to be downloaded in which
      # case we mark it as skippable
      if [[ -z "$isnew" ]]; then
        track_count=$( youtube-dl -f mp3-128 -g -- "$url" | wc -l )
        if [[ "$track_count" = "0" ]]; then
          echo "  ( no files )"
          touch $place/no-files
          continue
        fi
      fi

      # sometimes people are posting wav files ... really, that's crazy
      youtube-dl -f mp3-128 -- "$url"

    else
      count="✓ $count"
      echo "  $count $i"
    fi
  done
done
